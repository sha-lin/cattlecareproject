# Generated by Django 4.2.20 on 2025-04-07 14:11

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cattle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tagno', models.CharField(max_length=12, unique=True)),
                ('breed', models.CharField(max_length=50)),
                ('gender', models.CharField(max_length=10)),
                ('dob', models.DateField(default=datetime.date.today)),
                ('age_months', models.IntegerField(default=0)),
                ('age_years', models.IntegerField(default=0)),
                ('weight', models.IntegerField()),
                ('color', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Farmer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Unknown Farmer', max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(default='0000000000', max_length=15, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Unknown Vet', max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(max_length=15, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vaccination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vaccine', models.CharField(max_length=100)),
                ('date', models.DateField()),
                ('status', models.CharField(max_length=50)),
                ('cattle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.cattle')),
            ],
        ),
        migrations.CreateModel(
            name='CattleRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('breed', models.CharField(default='Unknown Breed', max_length=50)),
                ('gender', models.CharField(default='Unknown Gender', max_length=50)),
                ('dob', models.DateField(default=datetime.date.today)),
                ('vaccination_type', models.CharField(max_length=50)),
                ('last_vaccination_date', models.DateField()),
                ('next_vaccination_due', models.DateField(blank=True, null=True)),
                ('age_months', models.IntegerField(default=0)),
                ('age_years', models.IntegerField(default=0)),
                ('observation', models.TextField()),
                ('disease_diagnosis', models.TextField()),
                ('weight', models.FloatField()),
                ('color', models.CharField(default='Unknown Color', max_length=50)),
                ('tagno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.cattle', to_field='tagno')),
            ],
            options={
                'verbose_name_plural': 'Cattle Records',
            },
        ),
        migrations.CreateModel(
            name='CattleProductionStage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stage', models.CharField(choices=[('calf', 'Calf (0-6 months)'), ('heifer', 'Heifer (6-24 months)'), ('dry', 'Dry Cow'), ('early_lactation', 'Early Lactation (0-100 days)'), ('mid_lactation', 'Mid Lactation (100-200 days)'), ('late_lactation', 'Late Lactation (200+ days)')], default='calf', max_length=20)),
                ('milk_production', models.DecimalField(blank=True, decimal_places=2, help_text='kg/day', max_digits=6, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('cattle', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='production_stage', to='myapp.cattle')),
            ],
        ),
        migrations.AddField(
            model_name='cattle',
            name='owner',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='myapp.farmer'),
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fname', models.CharField(default='fname', max_length=100)),
                ('lname', models.CharField(default='lname', max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('mobile', models.CharField(default=0, max_length=15)),
                ('request_details', models.TextField(default='request')),
                ('status', models.CharField(default='Pending', max_length=20)),
                ('vet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.vet')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Is admin')),
                ('is_farmer', models.BooleanField(default=False, verbose_name='Is farmer')),
                ('is_vet', models.BooleanField(default=False, verbose_name='Is vet')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
